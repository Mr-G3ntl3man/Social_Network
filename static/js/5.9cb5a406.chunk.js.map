{"version":3,"sources":["image/defaultAvatar.jpg","components/GeneralChat/chat.module.scss","components/GeneralChat/Chat.tsx"],"names":["module","exports","ws","WebSocket","Chat","props","authorizedUserId","useSelector","state","auth","userData","id","useState","messages","setMessages","useEffect","listener","e","newMess","JSON","parse","data","addEventListener","removeEventListener","usersMessages","map","el","index","userM","className","s","userMess","to","userId","avatar","src","photo","defaultAvatar","size","userText","userName","message","myM","myMess","myText","setMessage","mainWrap","messageWrap","addMess","value","onChange","currentTarget","fullWidth","label","margin","variant","multiline","minRows","maxRows","style","fontFamily","onClick","send","color"],"mappings":"kHAAe,QAA0B,2C,oBCCzCA,EAAOC,QAAU,CAAC,SAAW,uBAAuB,QAAU,sBAAsB,SAAW,uBAAuB,OAAS,qBAAqB,SAAW,uBAAuB,OAAS,qBAAqB,YAAc,0BAA0B,OAAS,uB,qLCS/PC,EAAK,IAAIC,UAAU,gEASZC,EAAiB,SAACC,GAC5B,IAAMC,EAAmBC,aAA+C,SAAAC,GAAK,uBAAIA,EAAMC,KAAKC,gBAAf,aAAI,EAAqBC,MADhE,EAGNC,mBAAyB,IAHnB,mBAG/BC,EAH+B,KAGrBC,EAHqB,OAKIF,qBALJ,gCAMNA,oBAAkB,IANZ,6BAQtCG,qBAAU,WACP,IAAMC,EAAW,SAACC,GACf,IAAMC,EAAUC,KAAKC,MAAMH,EAAEI,MAE7BP,GAAY,SAAAN,GAAK,4BAAQA,GAAR,YAAkBU,QAKtC,OAFAhB,EAAGoB,iBAAiB,UAAWN,GAExB,kBAAMd,EAAGqB,oBAAoB,UAAWP,MAC/C,IAEH,IAAMQ,EAAgBX,EAASY,KAAI,SAACC,EAAIC,GACrC,IAAMC,EAAQ,sBAAiBC,UAAWC,IAAEC,SAA9B,UACX,8BACG,cAAC,IAAD,CAAMC,GAAE,mBAAcN,EAAGO,QAAzB,SACG,cAAC,IAAD,CAAQJ,UAAWC,IAAEI,OAAQC,IAAKT,EAAGU,OAASC,IAAeC,KAAM,cAIzE,oBAAGT,UAAWC,IAAES,SAAhB,UACG,+BAAOb,EAAGc,WACTd,EAAGe,aATcd,GAclBe,EAAM,qBAAiBb,UAAWC,IAAEa,OAA9B,SACT,mBAAGd,UAAWC,IAAEc,OAAhB,SACIlB,EAAGe,WAFYd,GAMtB,OACIrB,IAAqBoB,EAAGO,OACpBS,EACAd,KA5C2B,EAiDRhB,mBAAiB,IAjDT,mBAiD/B6B,EAjD+B,KAiDtBI,EAjDsB,KA8DtC,OACG,sBAAKhB,UAAWC,IAAEgB,SAAlB,UACG,qBAAKjB,UAAWC,IAAEiB,YAAlB,SACIvB,IAGJ,sBAAKK,UAAWC,IAAEkB,QAAlB,UACG,cAAC,IAAD,CACGC,MAAOR,EACPS,SAbY,SAACjC,GACtB4B,EAAW5B,EAAEkC,cAAcF,QAalBG,WAAS,EACTC,MAAO,gBACPC,OAAQ,SACRC,QAAS,WACTC,WAAS,EACTC,QAAS,EACTC,QAAS,KAGZ,cAAC,IAAD,CACGC,MAAO,CACJC,WAAW,gCAEdC,QAlCW,WAChBpB,IACDvC,EAAG4D,KAAKrB,GACRI,EAAW,MAgCLU,QAAS,YACTQ,MAAM,UANT,iCAaG3D","file":"static/js/5.9cb5a406.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/defaultAvatar.153ee148.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrap\":\"chat_mainWrap__4IgBi\",\"addMess\":\"chat_addMess__1co1R\",\"userMess\":\"chat_userMess__3hGtu\",\"myMess\":\"chat_myMess__2F2_o\",\"userText\":\"chat_userText__2Gmag\",\"myText\":\"chat_myText__SIBSi\",\"messageWrap\":\"chat_messageWrap__2n3tL\",\"avatar\":\"chat_avatar__269cD\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './chat.module.scss'\r\nimport {Avatar} from \"antd\";\r\nimport defaultAvatar from '../../image/defaultAvatar.jpg'\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../redux/redux-store\";\r\n\r\n\r\nconst ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\ntype ChatMessageT = {\r\n   message: string\r\n   photo: string\r\n   userId: number\r\n   userName: string\r\n}\r\n\r\nexport const Chat: React.FC = (props) => {\r\n   const authorizedUserId = useSelector<AppRootStateT, number | undefined>(state => state.auth.userData?.id)\r\n\r\n   const [messages, setMessages] = useState<ChatMessageT[]>([])\r\n\r\n   const [prevMesUserId, setPrevMesUserId] = useState<number>()\r\n   const [sameUser, setSameUser] = useState<boolean>(false)\r\n\r\n   useEffect(() => {\r\n      const listener = (e: MessageEvent<any>) => {\r\n         const newMess = JSON.parse(e.data)\r\n\r\n         setMessages(state => [...state, ...newMess])\r\n      }\r\n\r\n      ws.addEventListener('message', listener)\r\n\r\n      return () => ws.removeEventListener('message', listener)\r\n   }, [])\r\n\r\n   const usersMessages = messages.map((el, index) => {\r\n      const userM = <div key={index} className={s.userMess}>\r\n         <div>\r\n            <Link to={`/profile/${el.userId}`}>\r\n               <Avatar className={s.avatar} src={el.photo || defaultAvatar} size={'large'}/>\r\n            </Link>\r\n         </div>\r\n\r\n         <p className={s.userText}>\r\n            <span>{el.userName}</span>\r\n            {el.message}\r\n         </p>\r\n      </div>\r\n\r\n\r\n      const myM = <div key={index} className={s.myMess}>\r\n         <p className={s.myText}>\r\n            {el.message}\r\n         </p>\r\n      </div>\r\n\r\n      return (\r\n         (authorizedUserId === el.userId)\r\n            ? myM\r\n            : userM\r\n      )\r\n   })\r\n\r\n\r\n   const [message, setMessage] = useState<string>('')\r\n\r\n   const OnClickHandler = () => {\r\n      if (message) {\r\n         ws.send(message)\r\n         setMessage('')\r\n      }\r\n   }\r\n\r\n   const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n      setMessage(e.currentTarget.value)\r\n   }\r\n\r\n   return (\r\n      <div className={s.mainWrap}>\r\n         <div className={s.messageWrap}>\r\n            {usersMessages}\r\n         </div>\r\n\r\n         <div className={s.addMess}>\r\n            <TextField\r\n               value={message}\r\n               onChange={onChangeHandler}\r\n               fullWidth\r\n               label={'Write message'}\r\n               margin={\"normal\"}\r\n               variant={'outlined'}\r\n               multiline\r\n               minRows={1}\r\n               maxRows={10}\r\n            />\r\n\r\n            <Button\r\n               style={{\r\n                  fontFamily: `Mochiy Pop P One, sans-serif`\r\n               }}\r\n               onClick={OnClickHandler}\r\n               variant={\"contained\"}\r\n               color=\"primary\"\r\n            >Send message</Button>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Chat"],"sourceRoot":""}