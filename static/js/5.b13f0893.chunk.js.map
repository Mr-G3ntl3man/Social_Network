{"version":3,"sources":["image/defaultAvatar.jpg","components/GeneralChat/chat.module.scss","components/GeneralChat/Message.tsx","components/GeneralChat/SendMessageForm.tsx","components/GeneralChat/Chat.tsx"],"names":["module","exports","Message","React","memo","user","authorizedUserId","useSelector","state","auth","userData","id","userMessage","className","s","userMess","to","userId","style","photo","border","avatar","src","defaultAvatar","size","userText","userName","message","ownerMessage","myMess","myText","SendMessageForm","useState","setMessage","wsStatus","chat","status","dispatch","useDispatch","onKeyPressHandler","e","WS_STATUS","READY","key","sendMessage","addMess","TextField","onKeyPress","value","onChange","currentTarget","fullWidth","label","margin","variant","multiline","minRows","maxRows","Button","fontFamily","disabled","onClick","color","Chat","props","messages","wsError","error","autoScroll","setAutoScroll","startScroll","setStartScroll","usersMessages","map","messagesDivRef","useRef","useEffect","startMessagesListening","stopMessagesListening","target","current","scrollBy","top","scrollHeight","behavior","scrollTop","ERROR","Tooltip","severity","open","anchorOrigin","vertical","horizontal","mainWrap","ref","onScroll","clientHeight","Math","floor","messageWrap"],"mappings":"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","file":"static/js/5.b13f0893.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/defaultAvatar.153ee148.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrap\":\"chat_mainWrap__4IgBi\",\"addMess\":\"chat_addMess__1co1R\",\"userMess\":\"chat_userMess__3hGtu\",\"myMess\":\"chat_myMess__2F2_o\",\"userText\":\"chat_userText__2Gmag\",\"myText\":\"chat_myText__SIBSi\",\"messageWrap\":\"chat_messageWrap__2n3tL\",\"avatar\":\"chat_avatar__269cD\"};","import React from \"react\";\r\nimport s from \"./chat.module.scss\";\r\nimport {ChatMessageT} from \"../../redux/reducer/chat-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../redux/redux-store\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar} from \"antd\";\r\nimport defaultAvatar from \"../../image/defaultAvatar.jpg\";\r\n\r\n\r\nexport const Message: React.FC<{ user: ChatMessageT }> = React.memo(({user}) => {\r\n   const authorizedUserId = useSelector<AppRootStateT, number | undefined>(state => state.auth.userData?.id)\r\n\r\n   const userMessage = <div className={s.userMess}>\r\n      <div>\r\n         <Link to={`/profile/${user.userId}`}>\r\n            <Avatar style={user.photo ? {} : {border: '2px solid #7e7e7e'}} className={s.avatar}\r\n                    src={user.photo || defaultAvatar} size={'large'}/>\r\n         </Link>\r\n      </div>\r\n\r\n      <p className={s.userText}>\r\n         <span>{user.userName}</span>\r\n         {user.message}\r\n      </p>\r\n   </div>\r\n\r\n\r\n   const ownerMessage = <div className={s.myMess}>\r\n      <p className={s.myText}>\r\n         {user.message}\r\n      </p>\r\n   </div>\r\n\r\n   return (authorizedUserId === user.userId) ? ownerMessage : userMessage\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from \"./chat.module.scss\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {sendMessage, WS_STATUS} from \"../../redux/reducer/chat-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../redux/redux-store\";\r\n\r\nexport const SendMessageForm: React.FC = () => {\r\n   const [message, setMessage] = useState<string>('')\r\n\r\n   const wsStatus = useSelector<AppRootStateT, WS_STATUS>(state => state.chat.status)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const OnClickHandler = () => {\r\n      if (message) {\r\n         dispatch(sendMessage(message))\r\n         setMessage('')\r\n      }\r\n   }\r\n\r\n   const onKeyPressHandler = (e: KeyboardEvent<HTMLDivElement> | KeyboardEvent<HTMLButtonElement>) => {\r\n      if (wsStatus === WS_STATUS.READY) {\r\n         if (e.key === 'Enter' && message) {\r\n            dispatch(sendMessage(message))\r\n            setMessage('')\r\n         }\r\n      }\r\n   }\r\n\r\n   const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => setMessage(e.currentTarget.value)\r\n\r\n   return (\r\n      <div className={s.addMess}>\r\n         <TextField\r\n            onKeyPress={onKeyPressHandler}\r\n            value={message}\r\n            onChange={onChangeHandler}\r\n            fullWidth\r\n            label={'Write message'}\r\n            margin={\"normal\"}\r\n            variant={'outlined'}\r\n            multiline\r\n            minRows={1}\r\n            maxRows={10}\r\n         />\r\n\r\n         <Button\r\n            style={{fontFamily: `Mochiy Pop P One, sans-serif`}}\r\n            disabled={wsStatus !== WS_STATUS.READY}\r\n            onClick={OnClickHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            variant={\"contained\"}\r\n            color=\"primary\"\r\n         >Send message</Button>\r\n      </div>\r\n   )\r\n}","import React, {useEffect, useRef, useState} from \"react\";\r\nimport s from './chat.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../redux/redux-store\";\r\nimport {\r\n   ChatMessageT,\r\n   startMessagesListening,\r\n   stopMessagesListening,\r\n   WS_STATUS\r\n} from \"../../redux/reducer/chat-reducer\";\r\nimport {Message} from \"./Message\";\r\nimport {SendMessageForm} from \"./SendMessageForm\";\r\nimport {Tooltip} from \"../common/Tooltip/Tooltip\";\r\n\r\nexport const Chat: React.FC = (props) => {\r\n   const wsStatus = useSelector<AppRootStateT, WS_STATUS>(state => state.chat.status)\r\n\r\n   const messages = useSelector<AppRootStateT, ChatMessageT[]>(state => state.chat.messages)\r\n\r\n   const wsError = useSelector<AppRootStateT, boolean>(state => state.chat.error)\r\n\r\n   const [autoScroll, setAutoScroll] = useState<boolean>(false)\r\n\r\n   const [startScroll, setStartScroll] = useState<boolean>(false)\r\n\r\n   const usersMessages = messages.map((user) => <Message key={user.id} user={user}/>)\r\n\r\n   const messagesDivRef = useRef<HTMLDivElement>(null)\r\n\r\n   const dispatch = useDispatch()\r\n\r\n\r\n   useEffect(() => {\r\n      dispatch(startMessagesListening())\r\n\r\n      return () => {\r\n         dispatch(stopMessagesListening())\r\n      }\r\n   }, [dispatch])\r\n\r\n   useEffect(() => {\r\n      const target = messagesDivRef.current\r\n\r\n      if (startScroll) {\r\n\r\n         if (autoScroll) {\r\n            target && target.scrollBy({\r\n               top: target.scrollHeight,\r\n               behavior: 'smooth'\r\n            })\r\n         }\r\n\r\n      } else {\r\n         target && (target.scrollTop = target.scrollHeight)\r\n      }\r\n\r\n      return () => {\r\n         setStartScroll(false)\r\n      }\r\n   }, [messages])\r\n\r\n\r\n   const onScrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n      const target = messagesDivRef.current\r\n\r\n      if (target) {\r\n         const clientHeight = target.clientHeight\r\n         const scrollDistance = Math.floor(target.scrollHeight - target.scrollTop)\r\n\r\n         if (clientHeight >= scrollDistance) {\r\n            !autoScroll && setAutoScroll(true)\r\n            setStartScroll(true)\r\n         } else {\r\n            autoScroll && setAutoScroll(false)\r\n         }\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         {wsStatus === WS_STATUS.ERROR &&\r\n         <Tooltip\r\n            messages={'Something went wrong, please reload the page!!!'}\r\n            severity={'error'} open={wsError}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'center'}}/>}\r\n\r\n         <div className={s.mainWrap}>\r\n            <div ref={messagesDivRef} onScroll={onScrollHandler} className={s.messageWrap}>\r\n               {usersMessages}\r\n            </div>\r\n\r\n            <SendMessageForm/>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Chat"],"sourceRoot":""}