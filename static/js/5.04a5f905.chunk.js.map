{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Hoc/WithAuthRedirect.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","redux/selectors/dialog-selector.ts","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","Component","DialogMess","props","className","s","dialogs__content","message","DialogPerson","dialogs__person","to","id","name","mapStateToProps","state","isAuth","auth","getDialogPage","dialogsPage","DialogsContainer","compose","connect","dispatch","changeText","value","changeMessageAC","addMessage","addMessageAC","messages","map","el","dialogs","dialogsControl","onChange","e","currentTarget","newMessage","onClick","dialogsContent","dialogs__name","dialogs__mess","replace"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,cAAgB,+BAA+B,gBAAkB,iCAAiC,eAAiB,gCAAgC,eAAiB,kC,6FCUvOC,E,wCCNpBC,EAA0C,SAACC,GACrD,OACG,qBAAKC,UAAWC,IAAEC,iBAAlB,SAAqCH,EAAMI,W,QCFpCC,EAAqD,SAACL,GAChE,OACG,qBAAKC,UAAWC,IAAEI,gBAAlB,SACG,cAAC,IAAD,CAASC,GAAE,mBAAcP,EAAMQ,IAA/B,SAAsCR,EAAMS,U,iCFC/CC,EAAkB,SAACC,GAAD,MAAgD,CAACC,OAAQD,EAAME,KAAKD,SGP/EE,EAAgB,SAACH,GAAD,OAA0BA,EAAMI,aCkChDC,EAAmBC,YAC7BC,aAlBqB,SAACP,GACtB,MAAO,CACJI,YAAaD,EAAcH,OAGN,SAACQ,GACzB,MAAO,CACJC,WADI,SACOC,GACRF,EAASG,YAAgBD,KAG5BE,WALI,WAMDJ,EAASK,oBAKcP,EJzBCnB,EKJkB,SAACE,GACjD,IAAMyB,EAAWzB,EAAMe,YAAYU,SAASC,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAwBvB,QAAO,UAAKuB,EAAGvB,UAAtBuB,EAAGnB,OACpEoB,EAAU5B,EAAMe,YAAYa,QAAQF,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAclB,KAAI,UAAKkB,EAAGlB,MAAQD,GAAE,UAAKmB,EAAGnB,KAAWmB,EAAGnB,OAO9G,OACG,sBAAKP,UAAWC,IAAE0B,QAAlB,UACG,sBAAK3B,UAAWC,IAAE2B,eAAlB,UACG,0BAAUC,SARS,SAACC,GAAD,OAAyC/B,EAAMoB,WAAWW,EAAEC,cAAcX,QAQpDA,MAAOrB,EAAMe,YAAYkB,WAAlE,eACA,wBAAQC,QAPa,kBAAMlC,EAAMuB,cAOjC,kBAGH,sBAAKtB,UAAWC,IAAEiC,eAAlB,UACG,qBAAKlC,UAAWC,IAAEkC,cAAlB,SACIR,IAEJ,qBAAK3B,UAAWC,IAAEmC,cAAlB,SACIZ,WLVNP,YAAQR,EAARQ,EALkD,SAAClB,GACvD,OAAKA,EAAMY,OAEJ,cAACd,EAAD,eAAeE,IAFI,cAAC,IAAD,CAAUsC,SAAO,EAAC/B,GAAG,WI0BtCS","file":"static/js/5.04a5f905.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3TTOP\",\"dialogs__name\":\"Dialogs_dialogs__name__3oCHG\",\"dialogs__mess\":\"Dialogs_dialogs__mess__3Fx66\",\"dialogs__person\":\"Dialogs_dialogs__person__226bT\",\"dialogsControl\":\"Dialogs_dialogsControl__1P4v8\",\"dialogsContent\":\"Dialogs_dialogsContent__2-GRv\"};","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n   isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppRootStateT): MapStateToPropsType => ({isAuth: state.auth.isAuth})\r\n\r\nexport const WithAuthRedirect = (Component: React.FC<any> | React.ComponentClass<any>) => {\r\n\r\n   const RedirectComponent: React.FC<MapStateToPropsType> = (props) => {\r\n      if (!props.isAuth) return <Navigate replace to=\"/\"/>\r\n\r\n      return <Component {...props}/>\r\n   }\r\n   return connect(mapStateToProps)(RedirectComponent)\r\n\r\n}","import React from \"react\";\r\nimport s from '../Dialogs.module.css'\r\n\r\n\r\n\r\nexport const DialogMess: React.FC<{message: string}> = (props) => {\r\n   return(\r\n      <div className={s.dialogs__content}>{props.message}</div>\r\n   )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from '../Dialogs.module.css'\r\n\r\n\r\nexport const DialogPerson:  React.FC<{name:string, id: string}> = (props) => {\r\n   return(\r\n      <div className={s.dialogs__person}>\r\n         <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\n","import {AppRootStateT} from \"../redux-store\";\r\n\r\nexport const getDialogPage = (state: AppRootStateT) => state.dialogsPage\r\n","import {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {addMessageAC, changeMessageAC, DialogsPageType} from \"../../redux/reducer/dialog-reducer\";\r\nimport {AppRootStateT} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {WithAuthRedirect} from \"../Hoc/WithAuthRedirect\";\r\nimport {getDialogPage} from \"../../redux/selectors/dialog-selector\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n   dialogsPage: DialogsPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n   changeText: (value: string) => void\r\n   addMessage: () => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateT): MapStateToPropsType => {\r\n   return {\r\n      dialogsPage: getDialogPage(state)\r\n   }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n   return {\r\n      changeText(value: string) {\r\n         dispatch(changeMessageAC(value))\r\n\r\n      },\r\n      addMessage() {\r\n         dispatch(addMessageAC())\r\n      }\r\n   }\r\n}\r\n\r\nexport const DialogsContainer = compose(\r\n   connect(mapStateToProps, mapDispatchToProps)\r\n)(WithAuthRedirect(Dialogs))\r\n\r\nexport default DialogsContainer\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogMess} from \"./Message/Message\";\r\nimport {DialogPerson} from \"./DialogItem/DialogItem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n   const messages = props.dialogsPage.messages.map(el => <DialogMess key={el.id} message={`${el.message}`}/>)\r\n   const dialogs = props.dialogsPage.dialogs.map(el => <DialogPerson name={`${el.name}`} id={`${el.id}`} key={el.id}/>)\r\n\r\n   const onChangeTextHandler = (e: ChangeEvent<HTMLTextAreaElement>) => props.changeText(e.currentTarget.value)\r\n\r\n   const onClickAddMessHandler = () => props.addMessage()\r\n\r\n\r\n   return (\r\n      <div className={s.dialogs}>\r\n         <div className={s.dialogsControl}>\r\n            <textarea onChange={onChangeTextHandler} value={props.dialogsPage.newMessage}> </textarea>\r\n            <button onClick={onClickAddMessHandler}>+</button>\r\n         </div>\r\n\r\n         <div className={s.dialogsContent}>\r\n            <div className={s.dialogs__name}>\r\n               {dialogs}\r\n            </div>\r\n            <div className={s.dialogs__mess}>\r\n               {messages}\r\n            </div>\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\n"],"sourceRoot":""}